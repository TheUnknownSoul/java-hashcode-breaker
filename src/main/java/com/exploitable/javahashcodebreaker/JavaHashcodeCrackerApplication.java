package com.exploitable.javahashcodebreaker;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.awt.Graphics2D;
import java.awt.Graphics;
import java.awt.RenderingHints;
import java.awt.Font;
import java.awt.image.BufferedImage;

/**
 * Tool for dictionary attack Java Object Hashcode.
 *
 * @author Andrii Roi
 */
@SpringBootApplication
@Slf4j
public class JavaHashcodeCrackerApplication implements CommandLineRunner {

    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLACK_BACKGROUND = "\u001B[40m";
    private final HashCrackService crackService;

    public JavaHashcodeCrackerApplication(HashCrackService crackService) {
        this.crackService = crackService;
    }

    public static void main(String[] args) {
        SpringApplication.run(JavaHashcodeCrackerApplication.class, args);
    }

    @Override
    public void run(String... args) {
        System.out.println(ANSI_YELLOW + ANSI_BLACK_BACKGROUND);
        drawFirstPartOfLogo();
        System.out.println(ANSI_RED + ANSI_BLACK_BACKGROUND);
        drawSecondPartOfLogo();
        System.out.println(ANSI_RESET);
        crackService.crackTheHash(args);
    }

    private static BufferedImage getImageIntegerMode(int width, int height) {
        return new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
    }

    private static Graphics2D getGraphics2D(Graphics graphics, Settings settings) {
        graphics.setFont(settings.font);
        Graphics2D graphics2D = (Graphics2D) graphics;
        graphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        return graphics2D;
    }

    private record Settings(Font font, int width, int height) {
    }

    private static void drawFirstPartOfLogo() {
        BufferedImage bufferedImage = new BufferedImage(100, 20, BufferedImage.TYPE_INT_RGB);
        Graphics graphics = bufferedImage.getGraphics();
        Settings settings = new Settings(graphics.getFont(), 105, 15);
        BufferedImage image = getImageIntegerMode(settings.width, settings.height);
        Graphics2D graphics2D = getGraphics2D(image.getGraphics(), settings);
        graphics2D.drawString("JAVA HASHCODE", 6, ((int) (settings.height * 0.67)));
        graphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);

        drawLetters(settings, image);
    }

    private static void drawSecondPartOfLogo() {
        BufferedImage bufferedImage = new BufferedImage(100, 15, BufferedImage.TYPE_INT_RGB);
        Graphics graphics = bufferedImage.getGraphics();
        Settings settings = new Settings(graphics.getFont(), 105, 15);
        BufferedImage image = getImageIntegerMode(settings.width, settings.height);
        Graphics2D graphics2D = getGraphics2D(image.getGraphics(), settings);
        graphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        graphics2D.drawString("BREAKER", 6, ((int) (settings.height * 0.67)));

        drawLetters(settings, image);

    }

    private static void drawLetters(Settings settings, BufferedImage image) {
        for (int y = 0; y < settings.height; y++) {
            StringBuilder stringBuilder = new StringBuilder();
            for (int x = 0; x < settings.width; x++) {
                stringBuilder.append(image.getRGB(x, y) == -16777216 ? "*" : " ");
            }
            if (stringBuilder.toString().trim().isEmpty()) {
                continue;
            }
            System.out.println(stringBuilder);
        }
    }
}