package com.exploitable.javahashcodecracker;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.springframework.stereotype.Service;


import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Scanner;


@Service
@Slf4j
public class HashCrackService {
    private final Options options;
    private final CommandLineParser commandLineParser;
    private final HelpFormatter helpFormatter;


    private static final String ANSI_GREEN = "\u001B[32m";
    private static final String ANSI_RESET = "\u001B[0m";

    public HashCrackService(Options options, CommandLineParser commandLineParser, HelpFormatter helpFormatter) {
        this.options = options;
        this.commandLineParser = commandLineParser;
        this.helpFormatter = helpFormatter;
    }

    public void crackTheHash(String[] args) {
        try {
            CommandLine parse = commandLineParser.parse(options, args);
            if (parse.hasOption('h') & parse.hasOption('w') & parse.hasOption('v')) {
                String hashToCrack = parse.getOptionValue('h');
                String wordlist = parse.getOptionValue('w');
                Path pathToWordlist = Path.of(wordlist);
                log.info("Starting cracking ....");
                try (Scanner scanner = new Scanner(new FileReader(pathToWordlist.toFile()))) {
                    while (scanner.hasNextLine()) {
                        String line = scanner.next();
                        if (line != null) {
                            int possibleHash = line.hashCode();
                            log.info(line);
                            if (possibleHash == Integer.parseInt(hashToCrack)) {
                                log.info("Found. Hashed text is: " + ANSI_GREEN + line + ANSI_RESET + " which equal to " + possibleHash);
                                System.exit(0);
                            }
                        }
                    }
                    log.warn("Hash candidates not found.");
                }
            }
            if (parse.hasOption('h') & parse.hasOption('w') & !parse.hasOption('v')) {
                String hashToCrack = parse.getOptionValue('h');
                String wordlist = parse.getOptionValue('w');
                Path pathToWordlist = Path.of(wordlist);
                log.info("Starting cracking ....");
                try (Scanner reader = new Scanner(new FileReader(pathToWordlist.toFile()))) {
                    while (reader.hasNextLine()) {
                        String line = reader.next();
                        if (line != null) {
                            int possibleHash = line.hashCode();
                            if (possibleHash == Integer.parseInt(hashToCrack)) {
                                log.info("Found. Hashed text is: " + ANSI_GREEN + line + ANSI_RESET + " which equal to hash "
                                        + possibleHash + " in provided option.");
                                System.exit(0);
                            }
                        }
                    }
                    log.warn("Hash candidates not found.");
                }
            } else {
                helpFormatter.printHelp("please use the options below", options);
            }
        } catch (ParseException parseException) {
            log.error("Couldn't parse provided hash or something went wrong" + parseException.getMessage());
            System.exit(1);
        } catch (IOException e) {
            log.error("File not found. Check the file path " + e.getMessage());
        }
    }


}
